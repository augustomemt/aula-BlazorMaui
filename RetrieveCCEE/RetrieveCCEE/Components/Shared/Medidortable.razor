@using Domain.Models
@using MudBlazor


<MudTable Items="Data" Hover="true" Striped="true" Breakpoint="Breakpoint.Sm" T="Medidor" Filter="new Func<Medidor,bool>(FilterFunc1)" >
  <ToolBarContent>
    <MudText Typo="Typo.h6">Resultados</MudText>
    <MudSpacer />
    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
  </ToolBarContent>
  <HeaderContent >
    <MudTh><MudTableSortLabel SortBy="new Func<Medidor, object>(x=>x.CodMedidor)">Código Medidor</MudTableSortLabel></MudTh>
    <MudTh><MudTableSortLabel SortBy="new Func<Medidor, object>(x=>x.NomeMedidor)">Nome Medidor</MudTableSortLabel></MudTh>
    <MudTh><MudTableSortLabel SortBy="new Func<Medidor, object>(x=>x.DataReferencia)">Data de Referência</MudTableSortLabel></MudTh>
    <MudTh>Energia Ativa Consumo</MudTh>
    <MudTh>Energia Ativa Geração</MudTh>
    <MudTh>Energia Reativa Geração</MudTh>
    <MudTh>Energia Reativa Consumo</MudTh>
  </HeaderContent>
  <RowTemplate>
    <MudTd DataLabel="Codigo do Medidor">@context.CodMedidor</MudTd>
    <MudTd DataLabel="Nome Medidor">@context.NomeMedidor</MudTd>
    <MudTd DataLabel="Data de Referência">@context.DataReferencia.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
    <MudTd DataLabel="Energia Ativa Consumo">@context.EnergiaAtivaConsumo</MudTd>
    <MudTd DataLabel="Energia Ativa Geração">@context.EnergiaAtivaGeracao</MudTd>
    <MudTd DataLabel="Energia Reativa Consumo">@context.EnergiaReativaGeracao</MudTd>
    <MudTd DataLabel="Energia Reativa Geração">@context.EnergiaReativaConsumo</MudTd>
  </RowTemplate>
  <PagerContent>
    <MudTablePager PageSizeOptions="new int[] { 5, 10, 20 }" />
  </PagerContent>
</MudTable>

@code {
  [Parameter]
  public List<Medidor> Data { get; set; } = new();

  private string searchString1 = "";

  protected override void OnInitialized()
  {
    
    Data ??= new List<Medidor>();
  }

  private bool FilterFunc1(Medidor element) => FilterFunc(element, searchString1);

  private bool FilterFunc(Medidor element, string searchString)
  {
    if (string.IsNullOrWhiteSpace(searchString))
      return true;
    if (element.CodMedidor.Contains(searchString, StringComparison.OrdinalIgnoreCase))
      return true;
    if (element.DataReferencia.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
      return true; 
    if (element.NomeMedidor.Contains(searchString, StringComparison.OrdinalIgnoreCase))
      return true;
    return false;
  }
}
